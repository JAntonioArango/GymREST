services:
  db:
    image: mysql:8.3
    container_name: gym_mysql
    restart: unless-stopped
    ports:
      - "3306:3306"

    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      sonarqube:
        condition: service_started

    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL
      - SPRING_DATASOURCE_USERNAME
      - SPRING_DATASOURCE_PASSWORD
      - SPRING_JPA_DATABASE_PLATFORM
      - SERVER_PORT=8080

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      # by default SonarQube will spin up its embedded PostgreSQL
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/api/system/health" ]
      interval: 10s
      retries: 10

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  db-data:
  sonarqube_data:
  sonarqube_extensions:
  grafana_data:
