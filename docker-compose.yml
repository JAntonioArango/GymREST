services:
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8762:8761"
    networks:
      - gym-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: mysql:8.3
    container_name: gym_mysql
    restart: unless-stopped
    ports:
      - "3307:3306"

    networks:
      - gym-network

    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    volumes:
      - db-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      sonarqube:
        condition: service_started

    ports:
      - "8080:8080"
    env_file:
      - .env

    networks:
      - gym-network

    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/gymdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}


  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar

    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/api/system/health" ]
      interval: 10s
      retries: 10
    networks:
       - gym-network

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - gym-network

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - gym-network

networks:
  gym-network:
    driver: bridge

volumes:
  db-data:
  sonarqube_data:
  sonarqube_extensions:
  grafana_data:



